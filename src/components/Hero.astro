---
import { Button } from '@/components/ui/button'
import { ExternalLink } from 'lucide-react'

export interface Props {
  heroImage: string
  heroHeight?: number          // desktop in vh
  heroHeightMobile?: number    // mobile in vh
  topLogo?: boolean
  primaryText?: string
  subText?: string
  buttons?: Array<{
    text: string
    href: string
    variant?: 'primary' | 'outline'
    external?: boolean
  }>
}

const {
  heroImage,
  heroHeight        = 60,
  heroHeightMobile  = 30,
  topLogo           = false,
  primaryText,
  subText,
  buttons           = [],
} = Astro.props as Props

const logoSrc = '/brand/ursina_logo_wireframe.webp'
const logoAlt = 'Ursina Logo'
const siteName = 'Ursina Engine'
---

<section
  id="#swup"
  class="relative w-full h-[var(--hero-h-mobile)] md:h-[var(--hero-h)] overflow-hidden"
  style={`--hero-h:${heroHeight}vh; --hero-h-mobile:${heroHeightMobile}vh;`}
>
  <!-- blurred image layer -->
  <div
    class="absolute inset-0 bg-cover bg-center filter blur-sm"
    style={`background-image:url('${heroImage}');`}
  />
  <div class="absolute inset-0 bg-gradient-to-r from-black/70 via-black/40 to-transparent" />

  <div
    class="relative container mx-auto h-full
           grid place-items-center
           md:flex md:items-center md:justify-start
           px-6 text-center md:text-left"
  >
    <div class="md:w-1/2 text-white">
      {topLogo && (
        <div class="flex items-center justify-center md:justify-start mb-4">
          <img
            src={logoSrc}
            alt={logoAlt}
            class="h-10 w-auto mr-3 transition-transform hover:scale-105"
          />
          <h1 class="text-2xl md:text-4xl font-bold">{siteName}</h1>
        </div>
      )}

      {primaryText && (
        <h1 class="text-4xl md:text-6xl font-bold mb-4">{primaryText}</h1>
      )}

      {subText && <p class="text-lg mb-6">{subText}</p>}

      <div class="flex flex-wrap justify-center md:justify-start gap-4">
        {buttons.map((btn) => {
          const variant = btn.variant ?? 'primary'
          const cls =
            variant === 'primary'
              ? 'bg-primary text-primary-foreground hover:bg-primary/90'
              : 'border-primary text-primary hover:bg-primary/10'

          return (
            btn.href && (<a
              href={btn.href}
              {...(btn.external ? { target: '_blank', rel: 'noopener' } : {})}
            >
              <Button
                className={cls}
                size="lg"
                variant={variant === 'outline' ? 'outline' : undefined}
              >
                {btn.text}
                {btn.external && (
                  <ExternalLink className="w-4 h-4 ml-2 inline-block" />
                )}
              </Button>
            </a>)
          )
        })}
      </div>
    </div>
  </div>
</section>
