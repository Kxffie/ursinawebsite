---
// src/components/Sidebar.astro
import { ChevronDown } from 'lucide-react';
export interface Props {
  categories: string[];
  grouped: Record<string, { slug: string; data: { title: string } }[]>;
  base?: string;
}
const { categories, grouped, base='' } = Astro.props;
---
<aside class="w-64 sticky top-24 overflow-y-auto pr-2">
  <input
    type="text"
    id="searchDocs"
    placeholder="Searchâ€¦"
    class="w-full mb-4 px-3 py-2 border border-border bg-input text-foreground rounded"
  />
  <nav class="space-y-2" id="sidebarNav">
    {categories.map(cat => (
      <div class="category" data-open="true">
        <button
          type="button"
          class="w-full flex justify-between items-center px-3 py-1 hover:bg-sidebar-accent rounded group"
          data-astro-prefetch="hover"
        >
          <span class="font-semibold text-sidebar-foreground">{cat}</span>
          <ChevronDown
            className="chevron transition-transform duration-200"
            width={16}
            height={16}
          />
        </button>
        <div class="links pl-5 pt-1 space-y-1">
          {grouped[cat].map(doc => (
            <a
              data-astro-prefetch="hover"
              href={`/${base}/${doc.slug}`}
              class="block px-2 py-1 rounded text-sidebar-foreground hover:bg-sidebar-accent/95"
            >
              {doc.data.title}
            </a>
          ))}
        </div>
      </div>
    ))}
  </nav>

  <script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const nav = document.getElementById('sidebarNav');
    const input = document.getElementById('searchDocs');
    if (!nav || !input) return;

    // collapse/expand behavior
    nav.querySelectorAll('.category').forEach(section => {
      const btn = section.querySelector('button');
      const links = section.querySelector('.links');
      const chevron = section.querySelector('.chevron');

      updateChevron(section, chevron, links);

      btn.addEventListener('click', () => {
        const isOpen = section.getAttribute('data-open') === 'true';
        section.setAttribute('data-open', String(!isOpen));
        updateChevron(section, chevron, links);
      });
    });

    function updateChevron(section, chevron, links) {
      const btn = section.querySelector('button');
      const open = section.getAttribute('data-open') === 'true';

      if (open) {
        links.style.display = '';
        chevron.style.transform = 'rotate(0deg)';
        chevron.style.opacity = '0';
        btn.classList.remove('bg-card');
        btn.addEventListener('mouseover', () => chevron.style.opacity = '1');
        btn.addEventListener('mouseout', () => chevron.style.opacity = '0');
      } else {
        links.style.display = 'none';
        chevron.style.transform = 'rotate(-90deg)';
        chevron.style.opacity = '1';
        btn.classList.add('bg-card');
      }
    }

    const links = Array.from(nav.querySelectorAll('a'));

    input.addEventListener('input', () => {
      const raw = input.value.trim().toLowerCase();
      let categoryFilter = null;
      let termFilter = raw;

      const slashIndex = raw.indexOf('/');
      if (slashIndex > -1) {
        categoryFilter = raw.slice(0, slashIndex);
        termFilter = raw.slice(slashIndex + 1);
      }

      links.forEach(a => {
        const title = a.textContent.toLowerCase();
        const categoryName = a.closest('.category')
          .querySelector('button')
          .textContent.toLowerCase();
        const inCategory = !categoryFilter || categoryName.includes(categoryFilter);
        const matchesTerm = !termFilter || title.includes(termFilter);
        a.style.display = (inCategory && matchesTerm) ? '' : 'none';
      });

      nav.querySelectorAll('.category').forEach(section => {
        const chevron = section.querySelector('.chevron');
        const linksDiv = section.querySelector('.links');
        const anyVisible = Array.from(section.querySelectorAll('a'))
          .some(a => a.style.display !== 'none');

        if (anyVisible) {
          section.style.display = '';
          if (section.getAttribute('data-open') !== 'true') {
            section.setAttribute('data-open', 'true');
            updateChevron(section, chevron, linksDiv);
          }
        } else {
          section.style.display = 'none';
        }
      });
    });
  });
</script>

  
</aside>
