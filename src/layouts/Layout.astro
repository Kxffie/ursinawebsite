a---
// src/layouts/Layout.astro

import Navbar from '@/components/Navbar.astro';
import Footer from '@/components/Footer.astro';
import '../styles/global.css';

import { ExternalLink }      from 'lucide-react';
import { Button }            from '@/components/ui/button';
import Analytics             from '@vercel/analytics/astro';
import SpeedInsights         from "@vercel/speed-insights/astro";
import { SEO }               from 'astro-seo';
import Hero              from '@/components/Hero.astro';

const {
  title = 'Ursina Engine',
  description = 'Free, open-source Python game engine built on Panda3D.',

  heroImage,
  heroHeight,
  heroHeightMobile,
  topLogo,
  primaryText,
  subText,
  primaryBtn,
  primaryBtnHref,
  secondaryBtn,
  secondaryBtnHref,

  primaryExternal,
  secondaryExternal,

  canonical = `https://ursinaengine.org${Astro.url.pathname}`,
} = Astro.props;
---
<!-- DARK MODE DEFAULT -->
<html class="dark" lang="en">
  <head>
    <!-- sitemap -->
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Astro SEO: this will render all title/meta/og/twitter tags -->
    <SEO
      title={`Ursina Engine | ${title}`}
      titleTemplate={`%s — Ursina Engine`}
      titleDefault="Ursina Engine"
      description={description}
      canonical={canonical}
      noindex={false}
      nofollow={false}
      charset="utf-8"
      languageAlternates={[
        { href: 'https://ursinaengine.org/', hrefLang: 'en' },
      ]}
      openGraph={{
        basic: {
          title: `Ursina Engine | ${title}`,
          type: 'website',
          image: heroImage || '/default-og-image.png',
          url: canonical
        },
        optional: {
          description,
          determiner: 'the',
          locale: 'en_US',
          localeAlternate: ['en_GB'],
          siteName: 'Ursina Engine'
        },
        image: {
          secureUrl: (heroImage || '/default-og-image.png').replace(/^http:/, 'https:'),
          type: 'image/png',
          width: 1200,
          height: 630,
          alt: `${title} — preview image`
        }
      }}
      twitter={{
        card: 'summary_large_image',
        site: '@ursinaengine',
        creator: '@ursinaengine',
        title: `Ursina Engine | ${title}`,
        description,
        image: heroImage || '/default-og-image.png',
        imageAlt: `${title} — preview image`
      }}
      extend={{
        link: [
          { rel: 'icon', href: '/favicon.ico' },
          { rel: 'apple-touch-icon', href: '/apple-touch-icon.png' },
          { rel: 'alternate', href: 'https://ursinaengine.org/', hreflang: 'en' },
        ],
        meta: [
          { name: 'robots', content: 'index, follow' },
          { name: 'theme-color', content: '#0f172a' },
        ]
      }}
    />

    <!-- legacy or custom fallbacks (optional) -->
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- end custom fallbacks -->

    <!-- analytics, etc. -->
    <script
      is:inline
      type="text/partytown"
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-021QZDYMWM"
    ></script>
    <script is:inline type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag() { dataLayer.push(arguments); }
      gtag('js', new Date());
      gtag('config', 'G-021QZDYMWM');
    </script>
  </head>

  <body>
    <!-- NAVBAR -->
    <Navbar />


    <!-- HERO SECTION -->
        {heroImage && (
          <Hero
            heroImage={heroImage}
            heroHeight={heroHeight}
            heroHeightMobile={heroHeightMobile}
            topLogo={topLogo}
            primaryText={primaryText}
            subText={subText}
            buttons={[
              primaryBtn && {
                text: primaryBtn,
                href: primaryBtnHref,
                variant: 'primary',
                external: primaryExternal ?? false,
              },
              secondaryBtn && {
                text: secondaryBtn,
                href: secondaryBtnHref,
                variant: 'outline',
                external: secondaryExternal ?? false,
              },
            ].filter(Boolean)}
          />
    )}


    <!-- MAIN CONTENT -->
    <main>
      <slot />
    </main>

    <!-- FOOTER -->
    <Footer />

    
    <!-- COPY HEADERS FROM MARKDOWN CORRECTLY -->
    <script is:inline>
      document.addEventListener('click', (e) => {
        const link = e.target.closest('a.header-anchor')
        if (!link) return
        e.preventDefault()
        const href = link.getAttribute('href')
        const url = window.location.origin + window.location.pathname + href
        navigator.clipboard.writeText(url).then(() => {
          const msg = document.createElement('div')
          msg.textContent = 'Link copied!'
          Object.assign(msg.style, {
            position: 'fixed',
            bottom: '1rem',
            right: '1rem',
            background: 'rgba(0,0,0,0.8)',
            color: 'white',
            padding: '0.5rem 1rem',
            borderRadius: '0.25rem',
            zIndex: '9999',
          })
          document.body.append(msg)
          setTimeout(() => msg.remove(), 2000)
        })
      })
    </script>
    
    <!-- VERCEL ANALYTICS -->
    <Analytics />
    <SpeedInsights />
    <!-- VERCEL ANALYTICS -->
  </body>
</html>
